--- src/Form/ConfigSplitEntityForm.php
+++ src/Form/ConfigSplitEntityForm.php
@@ -90,8 +90,13 @@ class ConfigSplitEntityForm extends EntityForm {
     }, $module_handler->getModuleList());
     // Add the existing ones with the machine name so they do not get lost.
     $modules = $modules + array_combine(array_keys($config->get('module')), array_keys($config->get('module')));
+    // Sort module list by name
+    asort($modules);
+
+    $form['#attached']['library'][] = 'config_split/config-split-form';
+
     $form['blacklist_fieldset']['module'] = [
-      '#type' => 'select',
+      '#type' => $this->useSelectList() ? 'select' : 'checkboxes',
       '#title' => $this->t('Modules'),
       '#description' => $this->t('Select modules to split. Configuration depending on the modules is automatically split off completely as well.'),
       '#options' => $modules,
@@ -107,7 +112,7 @@ class ConfigSplitEntityForm extends EntityForm {
       return $theme_handler->getName($theme->getName());
     }, $theme_handler->listInfo());
     $form['blacklist_fieldset']['theme'] = [
-      '#type' => 'select',
+      '#type' => $this->useSelectList() ? 'select' : 'checkboxes',
       '#title' => $this->t('Themes'),
       '#description' => $this->t('Select themes to split.'),
       '#options' => $themes,
@@ -120,8 +125,9 @@ class ConfigSplitEntityForm extends EntityForm {
     // @codingStandardsIgnoreEnd
 
     $options = array_combine($this->configFactory()->listAll(), $this->configFactory()->listAll());
-    $form['blacklist_fieldset']['blacklist_select'] = [
-      '#type' => 'select',
+
+    $form['blacklist_fieldset']['blacklist_picker'] = [
+      '#type' => $this->useSelectList() ? 'select' : 'checkboxes',
       '#title' => $this->t('Configuration items'),
       '#description' => $this->t('Select configuration to split. Configuration depending on split modules does not need to be selected here specifically.'),
       '#options' => $options,
@@ -148,8 +154,8 @@ class ConfigSplitEntityForm extends EntityForm {
        should also remain in the main sync directory."),
     ];
 
-    $form['graylist_fieldset']['graylist_select'] = [
-      '#type' => 'select',
+    $form['graylist_fieldset']['graylist_picker'] = [
+      '#type' => $this->useSelectList() ? 'select' : 'checkboxes',
       '#title' => $this->t('Configuration items'),
       '#description' => $this->t('Select configuration to split conditionally.'),
       '#options' => $options,
@@ -202,20 +208,60 @@ class ConfigSplitEntityForm extends EntityForm {
     $extensions = $this->config('core.extension');
     // Add the configs modules so we can save inactive splits.
     $module_list = $extensions->get('module') + $this->entity->get('module');
-    $form_state->setValue('module', array_intersect_key($module_list, $form_state->getValue('module')));
-    $form_state->setValue('theme', array_intersect_key($extensions->get('theme'), $form_state->getValue('theme')));
+
+    $moduleSelection = $this->readValuesFromPicker($form_state->getValue('module'));
+    $form_state->setValue('module', array_intersect_key($module_list, $moduleSelection));
+
+    $themeSelection = $this->readValuesFromPicker($form_state->getValue('theme'));
+    $form_state->setValue('theme', array_intersect_key($extensions->get('theme'), $themeSelection));
+
+    $blacklistSelection = $this->readValuesFromPicker($form_state->getValue('blacklist_picker'));
     $form_state->setValue('blacklist', array_merge(
-      array_keys($form_state->getValue('blacklist_select')),
+      array_keys($blacklistSelection),
       $this->filterConfigNames($form_state->getValue('blacklist_text'))
     ));
+
+    $graylistSelection = $this->readValuesFromPicker($form_state->getValue('graylist_picker'));
     $form_state->setValue('graylist', array_merge(
-      array_keys($form_state->getValue('graylist_select')),
+      array_keys($graylistSelection),
       $this->filterConfigNames($form_state->getValue('graylist_text'))
     ));
 
     parent::submitForm($form, $form_state);
   }
 
+  /**
+   * If the chosen module is active, the form must use select field.
+   *
+   * @return bool
+   *   True if the form must use a select field
+   */
+  protected function useSelectList() {
+    $module_handler = $this->moduleHandler;
+    return $module_handler->moduleExists('chosen');
+  }
+
+  /**
+   * Read values selected depending on widget used in the form: select or
+   * checkbox.
+   *
+   * @param array $pickerSelection
+   * @return array
+   *   Array of selected values
+   */
+  protected function readValuesFromPicker(array $pickerSelection) {
+    if ($this->useSelectList()) {
+      $moduleSelection = $pickerSelection;
+    }
+    else {
+      // checkboxes return a value for each item. We only keep the selected one.
+      $moduleSelection = array_filter($pickerSelection, function ($value) {
+        return $value;
+      });
+    }
+    return $moduleSelection;
+  }
+
   /**
    * Filter text input for valid configuration names (including wildcards).
    *
