<?php

/**
 * @file
 * Installation actions for Splide.
 */

/**
 * Implements hook_requirements().
 */
function splide_requirements($phase) {
  if ($phase != 'runtime') {
    return [];
  }

  $path = splide('skin')->getSplidePath();
  $exists = $path ? is_file($path . '/dist/js/splide.min.js') : FALSE;

  return [
    'splide_library' => [
      'title'       => t('Splide library'),
      'description' => $exists ? '' : t('The <a href=":url">Splide library</a> should be installed at <strong>/libraries/splidejs--splide/dist/js/splide.min.js</strong>, or <strong>/libraries/splide/dist/js/splide.min.js</strong>, or any path supported by core library finder ot libraries.module if installed. Check out file or folder permissions if troubled.', [':url' => 'https://github.com/Splidejs/splide']),
      'severity'    => $exists ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      'value'       => $exists ? t('Installed') : t('Not installed'),
    ],
  ];
}

/**
 * Implements hook_uninstall().
 */
function splide_uninstall() {
  // @todo use blazy_filter_cleanup('splide'); at Blazy 3+ instead.
  // Or remove when core filter takes care of its own plugins removal cleanly.
  $config_factory = \Drupal::configFactory();
  $config_storage = \Drupal::service('config.storage');

  $module = 'splide';
  $filter = "filters.{$module}_filter";

  // Removes unclean splide_filter references, see #3257390.
  foreach ($config_storage->listAll('filter.format') as $config_name) {
    $config = $config_factory->getEditable($config_name);
    $plugin = $config->get($filter);

    if ($plugin) {
      $dependencies = $config->get('dependencies');
      $modules = array_diff($dependencies['module'], [$module]);

      $config
        ->clear($filter)
        ->set('dependencies.module', $modules)
        ->save(TRUE);
    }
  }

  // Just to be safe and sure, reset filter_formats cache, etc.
  if (function_exists('drupal_static_reset')) {
    drupal_static_reset('filter_formats');
  }

  \Drupal::entityTypeManager()->getStorage('filter_format')->resetCache();

  // Clear plugin manager caches.
  \Drupal::getContainer()->get('plugin.cache_clearer')->clearCachedDefinitions();
}
