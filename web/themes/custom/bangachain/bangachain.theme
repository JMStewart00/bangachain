<?php

use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\recurring_events\Entity\EventSeries;

/**
 * @file
 * Functions to support theming in the main Greasy theme.
 */

/**
 * Implements hook_bangachain_layout_background_colors().
 */
function bangachain_bangachain_layout_background_colors(): array {
  return [
    'none' => t('None'),
    'blue' => t('Blue'),
    'blue-gray' => t('Blue Gray'),
    'cyan' => t('Cyan Blue'),
    'gray-light' => t('Light Gray'),
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This theme suggestion allows specific forms to be themed.
 */
function bangachain_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_form_alter().
 *
 * This is used to add a class to the <form> for styling.
 */
function bangachain_form_alter(&$form, &$form_state, $form_id) {
  // Do not add classes for Layout Builder forms.
  if (strpos($form['#form_id'], 'layout') !== false) {
    return;
  }

  $form['#attributes']['class'][] = 'c-form';

  // Commerce Add to Cart form.
  if ((strpos($form_id, 'commerce_order_item_add_to_cart_form_commerce_product_') === 0)) {
    $selected_id = $form_state->getUserInput() ? $form_state->getUserInput()['purchased_entity'][0]['variation'] : NULL;
    $selected_variation = $selected_id ? ProductVariation::load($selected_id) : $form_state->get('product')->getDefaultVariation();
    if (isset($selected_variation)) {
      // Set form data attribute for the product variation id.
      $form['#attributes']['data-product-variation-id'] = $selected_variation->id();

      $form['price'] = [
        '#type'   => 'markup',
        '#markup' => '<div class="c-product__price">$' . number_format($selected_variation->getPrice()->getNumber(), 2) . '</div>',
      ];
      $form['price']['#weight'] = -100;
    }

    switch ($selected_variation->bundle()) {
      case 'discs':
        $form['purchased_entity']['widget'][0]['variation']['#title'] = 'Disc - Plastic, Color, Weight';
        break;

      case 'apparel':
        $form['purchased_entity']['widget'][0]['variation']['#title'] = 'Product - Size, Color';
        break;

      default:
        $form['purchased_entity']['widget'][0]['variation']['#title'] = 'Select one:';
        break;
    }

  }
}

/**
 * Implements hook_preprocess_HOOK() for form_element.
 *
 * This is used to add a class to form element wrappers.
 */

function bangachain_preprocess_form_element(&$variables) {
  $variables['attributes']['class'][] = 'c-form__element';
}

/**
 * Implements hook_preprocess_HOOK() for form_element.
 *
 * This is used to add a class to form element wrappers.
 */

function bangachain_preprocess_page(&$variables) {
  $current_uri = \Drupal::request()->getRequestUri();

  if (str_contains($current_uri, '/search')) {
    $variables['hide_search'] = TRUE;
  }
}

/*
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bangachain_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // Do not add suggestion for Layout Builder inputs.
  if (isset($variables['element']['#name'])) {
    if (strpos($variables['element']['#name'], 'layout_settings') !== false) {
      return;
    }
  }

  $suggestions[] = 'input__' . $variables['element']['#type'] . '__custom';
}

/**
 * Implements template_preprocess_HOOK() for input.
 *
 * This is used to add a class to form elements by type.
 */
function bangachain_preprocess_input(&$variables) {
  $type_html = $variables['attributes']['type'];

  if (isset($variables['element']['#name'])) {
    // Do not add classes for Layout Builder inputs.
    if (strpos($variables['element']['#name'], 'layout_settings') !== false) {
      return;
    }

    if (strpos($variables['element']['#name'], 'op') !== false && $type_html == 'submit') {
      if ($variables['element']['#value'] && method_exists($variables['element']['#value'], 'render')) {

        $value = $variables['element']['#value']->render();
        if ($value == 'Update cart') {
          $variables['attributes']['class'][] = 'o-btn o-btn--primary';
        } else {
          $variables['attributes']['class'][] = 'o-btn o-btn--secondary';
        }
      }
      return;
    }

    // run through all types and set custom classes on the elements
    switch ($type_html) {
      case 'text':
      case 'password':
      case 'email':
      case 'tel':
      case 'number':
        $variables['attributes']['class'][] = 'c-form__text';

        // Remove a 'form-text' class. https://www.drupal.org/node/2315471
        $classes = $variables['attributes']['class'];
        $variables['attributes']['class'] = array_diff($classes, ['form-text']);
        break;
      case 'checkbox':
        $variables['attributes']['class'][] = 'c-form__checkbox';
        break;
      case 'radio':
        $variables['attributes']['class'][] = 'c-form__radio';
        break;
      case 'date':
        $variables['attributes']['class'][] = 'c-form__date';
        break;
      case 'time':
        $variables['attributes']['class'][] = 'c-form__time';
        break;
      case 'datetime':
        $variables['attributes']['class'][] = 'c-form__datetime';
        break;
      case 'submit':
        $variables['attributes']['class'][] = 'o-btn o-btn--secondary';
        break;
    }
  }
}

/**
 * Implements template_preprocess_HOOK() for input.
 *
 * This is used to add a class to form elements by type.
 */
function bangachain_preprocess_form_element_label(&$variables) {
  // Do not add suggetstion for Layout Builder labels.
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'layout-settings') !== false) {
      return;
    }
  }

  $variables['attributes']['class'][] = 'c-form__label';
}


/*
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bangachain_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if(!in_array('block__layout_builder', $suggestions) && isset($variables['elements']['#lb-block'])) {
    array_unshift($suggestions , 'block__layout_builder');
  }

  // Provide suggestion for block templates by custom block type.
  if (!empty($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];

    // Add `block--BLOCK-TYPE.html.twig`.
    $suggestions[] = 'block__' . $block->bundle();
    $view_mode = $variables['elements']['#configuration']['view_mode'];

    if (!empty($view_mode)) {
      // Add `block--BLOCK-TYPE--VIEW-MODE.html.twig`.
      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;
    }
  }
}

/*
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bangachain_theme_suggestions_details_alter(array &$suggestions, array $variables) {
  // Only add suggestion for webform details.
  if (isset($variables['element']['#webform'])) {
    $suggestions[] = 'details__custom';
  }
}


/**
 * Implements hook_preprocess_hook().
 *
 * Preprocess the address plain display mode.
 * - Adds a building name value based on the node's short name.
 * - Adds a google map url string based on address values.
 * - Adds a room/suite number value if an office location
 *   is rendering the building location.
 */
function bangachain_preprocess_address_plain(&$variables) {

  // Get parent node of address field. This will be a building location.
  $parent_node = $variables['address']->getParent()->getParent()->getEntity();

  if ($parent_node instanceof EventSeries) {
    $variables['is_event'] = TRUE;
  }

  // Get the node we're viewing from route.
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface) {
    $node_type = $node->getType();

    if ($node_type === 'provider') {
      // First check the primary location.
      $primary_office = $node->get('field_primary_location')->referencedEntities()[0];
      $primary_business = $primary_office->get('field_building_location')->getValue()[0]['target_id'];

      // If IDs match, get suite room number.
      if($primary_business == $parent_node->id()) {
        $variables['suite_room_number'] = $primary_office->get('field_suite_room_number')->getString();
      }

      // Loop over all secondary locations.
      $secondary_offices = $node->get('field_secondary_location')->referencedEntities();
      foreach ($secondary_offices as $secondary_office) {
        $secondary_business = $secondary_office->get('field_building_location')->getValue()[0]['target_id'];

        // If IDs match, get suite room number.
        if($secondary_business == $parent_node->id()) {
          $variables['suite_room_number'] = $secondary_office->get('field_suite_room_number')->getString();
        }
      }
    }
  }

  // Get building name.
  if ($parent_node->hasField('field_short_name')) {
    $variables['building_name'] = $parent_node->get('field_short_name')->getString();
  }

  // Build out a google maps link.
  $link_base = 'https://www.google.com/maps/search/?api=1&query=';
  $link_query = '';

  if (strlen($variables['address_line1']) > 0) {
    $link_query .= $variables['address_line1'] . ' ';
  }

  if (strlen($variables['address_line2']) > 0) {
    $link_query .= $variables['address_line2'] . ' ';
  }

  if (strlen($variables['locality']) > 0) {
    $link_query .= $variables['locality'] . ' ';
  }

  if (strlen($variables['administrative_area']['name']) > 0) {
    $link_query .= $variables['administrative_area']['name'] . ' ';
  }

  if (strlen($variables['postal_code']) > 0) {
    $link_query .= $variables['postal_code'] . ' ';
  }

  // Remove last space.
  $link_query = trim($link_query);

  // Encode.
  $link = $link_base .= urlencode($link_query);

  $variables['google_map_link'] = $link;
}


/**
 * Implements template_preprocess_commerce_product().
 */
function bangachain_preprocess_commerce_product(&$variables) {
  if (isset($variables['elements']['#commerce_product'])) {
    // Get view mode & assign variable.
    $view_mode = $variables['elements']['#view_mode'];
    $variables['view_mode'] = $view_mode;

    // Get product and variations.
    $product = $variables['elements']['#commerce_product'];
    $product_variations = $product->getVariations();

    // Product gallery images: The product gallery always looks like this:
    //
    // * Primary product image
    // * Product Variation images
    // * Additional product images (if available)
    //
    // Multiple variations can share a single image, which might in turn be
    // the same as the product primary image, so we make sure each
    // referenced entity is only included once.

    $product_gallery_images = [];

    // Primary product image
    if ($product->hasField('field_default_image') && isset($product->field_default_image->entity) && isset($variables['product']['field_default_image'])) {
      $product_gallery_images[$product->field_default_image->target_id] = [
        'image' => $variables['product']['field_default_image'],
      ];
    }

    // Product Variation images
    if (!empty($product_variations)) {
      // Get the variation field renderer so we can use it to render out any
      // image fields that are present
      $variation_view_builder = \Drupal::entityTypeManager()->getViewBuilder('commerce_product_variation');
      $stockServiceManager = \Drupal::service('commerce_stock.service_manager');

      foreach ($product_variations as $key => $variation) {
        $stock = intval($stockServiceManager->getStockLevel($variation));
        // If variation is active.
        if ($variation->status->value == '1' && $stock > 0) {
          // If variation has an image.
          if (isset($variation->field_product_image->entity)) {
            $product_gallery_images[$variation->field_product_image->target_id]['image'] = $variation_view_builder->viewField($variation->get('field_product_image'), $view_mode) ?: NULL;
          }
        }
      }
    }

    // TODO: Additional product images
    $variables['product_gallery_images'] = $product_gallery_images;
  }
}


