{#
/**
 * @file
 * Default theme implementation to display a hero slider item.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set video_background = FALSE %}
{% set image_background = FALSE %}
{% set background_url = '' %}
{% set background_bundle = '' %}

{# check to see if the field is empty or not #}
{% if content.field_media|render is not empty %}
  {# quick variable to check if field is a video or image #}
  {% set background_bundle = content.field_media[0]['#media'].bundle() %}
{% endif %}


{%
  set classes = [
    'c-hero-item',
    'c-hero-item--text-' ~ paragraph.field_text_position.value|clean_class,
    'c-hero-item--' ~ background_bundle|clean_class,
    'c-slider__item',
  ]
%}


{# check to see if the field is empty or not #}
{% if background_bundle %}
  {# set variables based on the bundle of the field #}
  {% if background_bundle == 'image' %}
    {% set image_background = TRUE %}
    {% set background_url = file_url(content.field_media[0]['#media'].field_media_image.entity.uri.value) %}
  {% elseif background_bundle == 'video' %}
    {% set video_background = TRUE %}
    {% set background_url = file_url(content.field_media[0]['#media'].field_media_video_file.entity.uri.value) %}
  {% endif %}

{% endif %}

{% block paragraph %}
  <div{{attributes.addClass(classes)}}>

    <div class="c-hero-item__content">
      <div class="l-row">
        <div class="c-hero-item__mobile-logo">
          <img src="{{'/' ~ directory ~ '/assets/images/logo-stacked.svg'}}" alt="Lifespan Logo">
        </div>
        <div class="c-hero-item__wysiwyg">
          {{ paragraph.field_content.value|check_markup(paragraph.field_content.format) }}
          {% if content.field_link %}
            <a href="{{ content.field_link.0['#url'] }}" title="{{ content.field_link.0['#title'] }}" class="o-btn o-btn--primary o-btn--large o-btn--icon u-vr__mt--1">
              {{ content.field_link.0['#title'] }}
              <i class="fas fa-angle-right fa-lg o-icon--amber"></i>
            </a>
          {% endif %}
        </div>
      </div>
      {# overlay for the darkened effect #}
      <div class="c-hero-item__overlay"></div>

      {# render either a video or image #}
      {% if video_background %}
        <video class="c-hero-item__video" playsinline="playsinline" autoplay="autoplay" muted="muted" loop="loop">
          <source src="{{background_url}}" type="video/mp4">
        </video>
      {% elseif image_background %}
        <div class="c-hero-item__image" style="background-image: url({{ background_url }})"></div>
      {% endif %}
    </div>


  </div>
{% endblock paragraph %}

