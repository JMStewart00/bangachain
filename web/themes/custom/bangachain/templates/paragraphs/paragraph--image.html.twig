{#
/**
 * @file
 * Default theme implementation to display an image paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'c-image-paragraph',
    'u-vr__my--1'
  ]
%}

{# Set image variable instead of rendering content.field_image to avoid
unnecessary markup in the paragraph. Allows us to get alt tag too.  #}
{% set image = paragraph.field_image.entity.field_media_image %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <figure>

      {# Image field is required for this paragraph. No need to check if it's there #}
      <img src="{{ file_url(image.entity.fileuri) }}" alt="{{ image.alt }}">

      {% if content.field_caption|render|trim|striptags %}
        <figcaption class="u-vr__py--1 u-fw__bold">{{ content.field_caption }}</figcaption>
      {% endif %}

    </figure>
  </div>
{% endblock paragraph %}

