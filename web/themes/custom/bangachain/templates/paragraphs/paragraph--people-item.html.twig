{#
/**
 * @file
 * Default theme implementation to display a people item.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set node_path = path('entity.node.canonical', {'node':  paragraph.field_person.entity.id}) %}

{%
  set classes = [
    'c-people-item',
    'u-vr__mb--2'
  ]
%}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
      <div class="c-people-item__headshot">
        {% if image_uri %}
          <img src="{{ image_uri|image_style('provider_headshot') }}" alt="{{paragraph.field_person.entity.getTitle()}} Headshot" />
        {% else %}
          <img src="/{{ base_path ~ directory }}/assets/images/default-provider.png" alt="Default Photo">
        {% endif %}
      </div>

    <div class="c-people-item__details">

      <h3 class="c-people-item__name h2">{{ paragraph.field_person.entity.getTitle() }}</h3>

      {% if paragraph.field_person.entity.get("field_professional_title") %}
        <h4 class="c-people-item__name h3">{{ paragraph.field_person.entity.get("field_professional_title").getString() }}</h3>
      {% endif %}

      <div class="c-people-item__blurb u-vr__my--1">
        {% if content.field_about_author_override.0 %}
          {{ content.field_about_author_override }}
        {% else %}
          {% set about_author = paragraph.field_person.entity.get("field_about_author").getvalue().0 %}
          {{ about_author.value|check_markup("basic_html") }}
        {% endif %}
      </div>

      {# Ensure Rabbit Hole hasn't been enabled before adding link #}
      {% if node_path and paragraph.field_person.entity.get("rh_action").getString() != "page_not_found" %}
        <a href="{{ node_path }}" class="c-people-item__link">More <i class="fas fa-angle-right o-icon--amber"></i></a>
      {% endif %}
    </div>

  </div>
{% endblock paragraph %}
